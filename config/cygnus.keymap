/*
 * Copyright (c) 2020 The ZMK Contributors
 *
 * SPDX-License-Identifier: MIT
 */

#include <dt-bindings/zmk/mouse.h>

#define ZMK_POINTING_DEFAULT_MOVE_VAL 1000  // default: 600
#define ZMK_POINTING_DEFAULT_SCRL_VAL 20    // default: 10

#include <behaviors.dtsi>
#include <dt-bindings/zmk/keys.h>

// #include <input/processors.dtsi>

/ {
    behaviors {
        hml: homerow_mods_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 51 52 53 48 49 50>;
        };

        hmr: homerow_mods_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_MODS_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50 51 52 53>;
        };

        layer_tap_quick: layer_tap_quick {
            compatible = "zmk,behavior-hold-tap";
            label = "LAYER_TAP_QUICK";
            bindings = <&mo>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <200>;
            flavor = "tap-preferred";
            quick-tap-ms = <200>;
        };

        qexcl: qexcl {
            compatible = "zmk,behavior-mod-morph";
            label = "QEXCL";
            bindings = <&kp QUESTION>, <&kp EXCL>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        comma_morph: comma_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "COMMA_MORPH";
            bindings = <&kp COMMA>, <&kp SEMI>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        dot_morph: dot_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "DOT_MORPH";
            bindings = <&kp DOT>, <&kp COLON>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        lpar_morph: lpar_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "LPAR_MORPH";
            bindings = <&kp LEFT_PARENTHESIS>, <&kp LT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        rpar_morph: rpar_morph {
            compatible = "zmk,behavior-mod-morph";
            label = "RPAR_MORPH";
            bindings = <&kp RIGHT_PARENTHESIS>, <&kp GT>;

            #binding-cells = <0>;
            mods = <(MOD_LSFT|MOD_RSFT)>;
        };

        homerow_gui_left: homerow_gui_left {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_GUI_LEFT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <6 7 8 9 10 11 18 19 20 21 22 23 30 31 32 33 34 35 42 43 44 45 46 47 51 52 53>;
        };

        homerow_gui_right: homerow_gui_right {
            compatible = "zmk,behavior-hold-tap";
            label = "HOMEROW_GUI_RIGHT";
            bindings = <&kp>, <&kp>;

            #binding-cells = <2>;
            tapping-term-ms = <280>;
            require-prior-idle-ms = <150>;
            flavor = "tap-preferred";
            hold-trigger-key-positions = <0 1 2 3 4 5 12 13 14 15 16 17 24 25 26 27 28 29 36 37 38 39 40 41 48 49 50>;
        };
    };

    combos {
        compatible = "zmk,combos";

        left-num-plus {
            bindings = <&kp PLUS>;
            key-positions = <16 28>;
        };

        left-num-minus {
            bindings = <&kp MINUS>;
            key-positions = <28 40>;
        };

        left-num-multiply {
            bindings = <&kp STAR>;
            key-positions = <15 27>;
        };

        left-num-divide {
            bindings = <&kp SLASH>;
            key-positions = <27 39>;
        };

        left-num-dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <17 29>;
        };

        left-num-underscore {
            bindings = <&kp UNDER>;
            key-positions = <29 41>;
        };

        right-num-dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <18 30>;
        };

        right-num-underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 42>;
        };

        dollar {
            bindings = <&kp DOLLAR>;
            key-positions = <16 28>;
        };

        percent {
            bindings = <&kp PERCENT>;
            key-positions = <17 29>;
        };

        underscore {
            bindings = <&kp UNDER>;
            key-positions = <30 42>;
            layers = <0>;
        };

        caret {
            bindings = <&kp CARET>;
            key-positions = <18 30>;
        };

        tilde {
            bindings = <&kp TILDE>;
            key-positions = <41 29>;
        };

        equal {
            bindings = <&kp EQUAL>;
            key-positions = <40 28>;
        };

        backslash {
            bindings = <&kp BACKSLASH>;
            key-positions = <39 27>;
        };

        pound {
            bindings = <&kp POUND>;
            key-positions = <27 15>;
        };

        at {
            bindings = <&kp AT>;
            key-positions = <14 26>;
        };

        grave {
            bindings = <&kp GRAVE>;
            key-positions = <26 38>;
        };

        plus {
            bindings = <&kp PLUS>;
            key-positions = <31 19>;
        };

        minus {
            bindings = <&kp MINUS>;
            key-positions = <31 43>;
        };

        star {
            bindings = <&kp STAR>;
            key-positions = <32 20>;
        };

        forwardslash {
            bindings = <&kp SLASH>;
            key-positions = <32 44>;
        };

        ampersand {
            bindings = <&kp AMPS>;
            key-positions = <21 33>;
        };

        pipe {
            bindings = <&kp PIPE>;
            key-positions = <45 33>;
        };

        left_parenthesis {
            bindings = <&lpar_morph>;
            key-positions = <32 31>;
        };

        right_parenthesis {
            bindings = <&rpar_morph>;
            key-positions = <33 32>;
        };

        left_bracket {
            bindings = <&kp LEFT_BRACKET>;
            key-positions = <44 43>;
        };

        right_bracket {
            bindings = <&kp RIGHT_BRACKET>;
            key-positions = <44 45>;
        };

        ctrl-alt-del {
            bindings = <&kp LC(LA(DEL))>;
            key-positions = <14 15 16>;
        };

        ctrl-shift-s {
            bindings = <&kp LC(LS(S))>;
            key-positions = <16 15>;
            require-prior-idle-ms = <280>;
        };

        shift-win-s {
            bindings = <&kp LS(LG(S))>;
            key-positions = <15 14>;
            require-prior-idle-ms = <280>;
        };

        left-enter {
            bindings = <&kp ENTER>;
            key-positions = <41 50>;
        };

        right-enter {
            bindings = <&kp ENTER>;
            key-positions = <42 51>;
        };

        right-calc {
            bindings = <&kp C_AL_CALC>;
            key-positions = <31 32 33>;
        };

        left-calc {
            bindings = <&kp C_AL_CALC>;
            key-positions = <26 27 28>;
        };

        left-lock {
            bindings = <&kp LG(L)>;
            key-positions = <40 39 38 37>;
        };

        right-lock {
            bindings = <&kp RG(L)>;
            key-positions = <43 44 45 46>;
        };
    };

    keymap {
        compatible = "zmk,keymap";

        default_layer {
            display-name = "BAS";
            bindings = <
&kp ESCAPE    &kp N1  &kp N2  &kp N3          &kp N4     &kp N5            &kp N6       &kp N7         &kp N8         &kp N9   &kp N0         &kp UP_ARROW
&kp TAB       &kp Q   &kp W   &kp E           &kp R      &kp T             &kp Y        &kp U          &kp I          &kp O    &kp P          &kp DOWN_ARROW
&kp LCTRL     &kp A   &kp S   &kp D           &kp F      &kp G             &kp H        &kp J          &kp K          &kp L    &kp SEMICOLON  &kp APOS
&kp CAPSLOCK  &kp Z   &kp X   &kp C           &kp V      &kp B             &kp N        &kp M          &kp COMMA      &kp DOT  &kp SLASH      &kp BACKSLASH
                              &lt 1 LEFT_WIN  &kp SPACE  &kp LEFT_SHIFT    &lt 2 ENTER  &kp BACKSPACE  &kp RIGHT_ALT
            >;
        };

        game_layer {
            display-name = "GAM";
            bindings = <
&kp HOME  &kp F1  &kp F2  &kp F3  &kp F4  &kp F5                 &kp F6          &kp F7        &kp F8          &kp F9     &kp F10  &kp F11
&kp END   &trans  &trans  &trans  &trans  &kp C_MUTE             &trans          &trans        &trans          &trans     &trans   &kp F12
&kp INS   &trans  &trans  &trans  &trans  &kp C_VOLUME_UP        &trans          &trans        &trans          &trans     &trans   &trans
&kp DEL   &trans  &trans  &trans  &trans  &kp C_VOL_DN           &kp LEFT_ARROW  &kp UP_ARROW  &kp DOWN_ARROW  &kp RIGHT  &trans   &trans
                          &trans  &trans  &kp C_AL_CALCULATOR    &trans          &trans        &trans
            >;
        };

        nav_layer {
            display-name = "NAV";
            bindings = <
&kp GRAVE  &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans    &trans     &trans     &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans    &kp MINUS  &kp EQUAL  &trans  &trans  &trans  &trans
&trans     &trans  &trans  &trans  &trans  &trans    &kp UNDER  &kp PLUS   &trans  &trans  &trans  &trans
                           &trans  &trans  &trans    &trans     &trans     &trans
            >;
        };
    };

    conditional_layers {
        compatible = "zmk,conditional-layers";

        game_adj {
            if-layers = <2 5>;
            then-layer = <7>;
        };

        adjust {
            if-layers = <2 3>;
            then-layer = <7>;
        };
    };
};
